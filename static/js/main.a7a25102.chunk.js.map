{"version":3,"sources":["components/Button.jsx","components/Input.jsx","components/ClearButton.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","id","Input","input","ClearButton","handleClear","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","addToInput","bind","assertThisInitialized","handleEqual","_this2","document","addEventListener","event","key","match","setState","numbers","split","length","indexOf","operators","currentState","replace","string","round","evaluate","_this3","Input_Input","Button_Button","ClearButton_ClearButton","React","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a7a25102.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./Button.css\"\r\n\r\nconst isOperator = val => {\r\n    return !isNaN(val) || val === \".\" || val === \"=\"\r\n}\r\n\r\nexport const Button = props => (\r\n    <div \r\n        className={`button-wrapper ${isOperator(props.children) ? null : \"operator\"}`}\r\n        onClick = {() => props.handleClick(props.children)}\r\n        id={props.id}>\r\n        {props.children}\r\n    </div>\r\n)\r\n","import React from 'react'\r\nimport './Input.css'\r\n\r\nexport const Input = props => <div className=\"input\" id={props.id}>{props.input}</div>","import React from 'react'\r\nimport './ClearButton.css'\r\n\r\nexport const ClearButton = props => <div className=\"clear-btn\" onClick={props.handleClear} id={props.id}>{props.children}</div>","import React from 'react';\nimport './App.css';\nimport { Button } from './components/Button'\nimport { Input } from'./components/Input'\nimport { ClearButton } from './components/ClearButton'\nimport { string, round, evaluate } from 'mathjs'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      input: '0'\n    }\n    \n    this.addToInput = this.addToInput.bind(this);\n    this.handleEqual = this.handleEqual.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", (event) => {\n      const key = event.key;\n      const regex = /[0-9+*\\-/.]/;\n      if(key.match(regex)){\n        this.addToInput(key);\n      }\n      else if(key === \"Enter\"){\n        this.handleEqual();\n      }\n      else if(key === \"Escape\") {\n        this.setState({\n          input: '0'\n        })\n      }\n    })\n  }\n\n  addToInput(val) {\n    if(val === \".\"){\n      const numbers = this.state.input.split(/[+*\\-/]/);\n      if(numbers[numbers.length-1].indexOf(\".\") > -1)\n        return;\n    }\n    const operators = /[+*\\-/]$/;\n    const currentState = this.state.input\n    if (val.match(operators) && currentState[currentState.length-1].match(operators)){\n      this.setState({input: this.state.input.replace(operators, val)}); \n    }\n    else if(this.state.input === \"0\"){\n      this.setState({input: val});\n    }\n    else {\n      this.setState({input: this.state.input + val});\n    }\n  }\n\n  handleEqual() {\n    if (isNaN(this.state.input[this.state.input.length-1])) {\n      this.setState({input: this.state.input});     \n      }\n      else {\n      this.setState({input: string(round(evaluate(this.state.input),10))});\n      }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc-wrapper\">\n          <Input input={this.state.input} id=\"display\"></Input>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput} id=\"seven\">7</Button>\n            <Button handleClick={this.addToInput} id=\"eight\">8</Button>\n            <Button handleClick={this.addToInput} id=\"nine\">9</Button>\n            <Button handleClick={this.addToInput} id=\"divide\">/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput} id=\"four\">4</Button>\n            <Button handleClick={this.addToInput} id=\"five\">5</Button>\n            <Button handleClick={this.addToInput} id=\"six\">6</Button>\n            <Button handleClick={this.addToInput} id=\"multiply\">*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput} id=\"one\">1</Button>\n            <Button handleClick={this.addToInput} id=\"two\">2</Button>\n            <Button handleClick={this.addToInput} id=\"three\">3</Button>\n            <Button handleClick={this.addToInput} id=\"add\">+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput} id=\"decimal\">.</Button>\n            <Button handleClick={this.addToInput} id=\"zero\">0</Button>\n            <Button handleClick={() => this.handleEqual()} id=\"equals\">=</Button>\n            <Button handleClick={this.addToInput} id=\"subtract\">-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear={() => this.setState({input: '0'})} id=\"clear\">Clear</ClearButton>\n          </div>\n        </div>\n      </div>\n    )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}